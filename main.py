from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import os
import uvicorn
# Import th∆∞ vi·ªán c·∫ßn thi·∫øt cho vi·ªác ch·∫°y h√†m ƒë·ªìng b·ªô (n·∫øu chatbot l√† ƒë·ªìng b·ªô)
from starlette.concurrency import run_in_threadpool 

# --- 1. Import module Chatbot th·ª±c t·∫ø (app.py) ---
try:
    # Gi·∫£ ƒë·ªãnh module ch·ª©a logic chatbot ƒë∆∞·ª£c ƒë·∫∑t t√™n l√† 'app' (app.py)
    import app 
except ImportError:
    # N·∫øu kh√¥ng t√¨m th·∫•y app.py, g√°n app = None ƒë·ªÉ tr√°nh l·ªói crash
    app = None
    print("‚ö†Ô∏è WARNING: Could not import 'app' module. Using mock response if actual chatbot is missing.")

# --- 2. Khai b√°o Model cho d·ªØ li·ªáu ƒë·∫ßu v√†o ---
class Question(BaseModel):
    """ƒê·ªãnh nghƒ©a c·∫•u tr√∫c d·ªØ li·ªáu JSON ƒë·∫ßu v√†o."""
    question: str

# ---------------------------------------
# 3. Kh·ªüi t·∫°o FastAPI App + b·∫≠t CORS
# ---------------------------------------
# Kh·ªüi t·∫°o ·ª©ng d·ª•ng FastAPI
app_fastapi = FastAPI(
    title="Chatbot Lu·∫≠t Lao ƒë·ªông API",
    description="API cho m√¥ h√¨nh chatbot",
    version="1.0.0"
)

# üîπ C·∫•u h√¨nh CORS Middleware
# Cho ph√©p t·∫•t c·∫£ c√°c domain (origins=["*"]) ho·∫∑c domain c·ª• th·ªÉ.
origins = [
    "*", # Cho ph√©p t·∫•t c·∫£ c√°c domain g·ªçi API n√†y
    # "https://chatbotlaodong.vn", # N·∫øu b·∫°n ch·ªâ mu·ªën cho ph√©p domain c·ª• th·ªÉ
]

app_fastapi.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ---------------------------------------
# 4. Route ki·ªÉm tra ho·∫°t ƒë·ªông (GET /)
# ---------------------------------------
@app_fastapi.get("/", summary="Ki·ªÉm tra tr·∫°ng th√°i API")
async def home():
    """Route ki·ªÉm tra xem API c√≥ ho·∫°t ƒë·ªông kh√¥ng."""
    return {
        "message": "‚úÖ Chatbot Lu·∫≠t Lao ƒë·ªông API ƒëang ho·∫°t ƒë·ªông.",
        "usage": "G·ª≠i POST t·ªõi /chat v·ªõi JSON { 'question': 'C√¢u h·ªèi c·ªßa b·∫°n' }",
        "chatbot_status": "‚úÖ ƒê√£ t·∫£i logic chatbot (app.chatbot) th√†nh c√¥ng." if app and hasattr(app, "chatbot") else "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y app.chatbot. Ch·ªâ tr·∫£ l·ªùi gi·∫£ l·∫≠p.",
    }

# ---------------------------------------
# 5. Route ch√≠nh: /chat (POST)
# ---------------------------------------
@app_fastapi.post("/chat", summary="D·ª± ƒëo√°n/Tr·∫£ l·ªùi c√¢u h·ªèi t·ª´ Chatbot")
async def predict(data: Question):
    """
    Nh·∫≠n c√¢u h·ªèi v√† tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi t·ª´ m√¥ h√¨nh chatbot.
    """
    question = data.question.strip()

    if not question:
        raise HTTPException(status_code=400, detail="Thi·∫øu tr∆∞·ªùng 'question' trong JSON ho·∫∑c c√¢u h·ªèi b·ªã r·ªóng.")

    # ‚ùó ƒê·∫£m b·∫£o app ƒë∆∞·ª£c import v√† c√≥ ƒë·ªëi t∆∞·ª£ng chatbot
    if app and hasattr(app, "chatbot"):
        try:
            answer = None
            session = "api_session" # ID session c·ªë ƒë·ªãnh cho API call
            
            # Ki·ªÉm tra xem app.chatbot.invoke c√≥ ph·∫£i l√† h√†m b·∫•t ƒë·ªìng b·ªô (coroutine) kh√¥ng
            # co_flags & 0x80 l√† c√°ch ki·ªÉm tra nhanh h√†m async t·∫°i runtime
            if app.chatbot.invoke.__code__.co_flags & 0x80:
                # N·∫øu l√† async (b·∫•t ƒë·ªìng b·ªô), d√πng await tr·ª±c ti·∫øp
                response = await app.chatbot.invoke(
                    {"message": question},
                    config={"configurable": {"session_id": session}}
                )
            else:
                # N·∫øu l√† sync (ƒë·ªìng b·ªô), ch·∫°y n√≥ trong thread pool ƒë·ªÉ kh√¥ng ch·∫∑n server ch√≠nh
                response = await run_in_threadpool(
                    app.chatbot.invoke,
                    {"message": question},
                    config={"configurable": {"session_id": session}}
                )
            
            # X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ
            if isinstance(response, dict) and 'output' in response:
                answer = response['output']
            elif isinstance(response, str):
                answer = response
            else:
                # Tr∆∞·ªùng h·ª£p kh√¥ng ph·∫£i dict c√≥ 'output' ho·∫∑c string
                answer = f"L·ªói: Chatbot tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng kh√¥ng mong mu·ªën (Type: {type(response)}). Vui l√≤ng ki·ªÉm tra logic c·ªßa app.chatbot."
            
            return {"answer": answer}

        except Exception as e:
            print(f"L·ªñI X·ª¨ L√ù CHATBOT: {e}")
            raise HTTPException(
                status_code=500, 
                detail=f"L·ªói x·ª≠ l√Ω Chatbot: {str(e)}. Vui l√≤ng ki·ªÉm tra log backend c·ªßa b·∫°n (v√≠ d·ª•: thi·∫øu API key, l·ªói k·∫øt n·ªëi)."
            )
    else:
        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng t√¨m th·∫•y chatbot
        answer = f"(Chatbot m√¥ ph·ªèng - L·ªñI BACKEND: Kh√¥ng t√¨m th·∫•y ƒë·ªëi t∆∞·ª£ng app.chatbot) B·∫°n h·ªèi: '{question}'"
        return {"answer": answer}


# ---------------------------------------
# 6. Kh·ªüi ƒë·ªông server Uvicorn (FastAPI)
# ---------------------------------------
if __name__ == "__main__":
    # CH√ö √ù QUAN TR·ªåNG: 
    # N·∫øu file n√†y ƒë∆∞·ª£c l∆∞u t√™n l√† main.py, th√¨ uvicorn.run("main:app_fastapi", ...) l√† ch√≠nh x√°c.
    # N·∫øu file n√†y ƒë∆∞·ª£c l∆∞u t√™n l√† api.py, b·∫°n ph·∫£i ƒë·ªïi th√†nh uvicorn.run("api:app_fastapi", ...)
    
    port = int(os.environ.get("PORT", 10000))
    # D√πng "0.0.0.0" ƒë·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông t·ªët tr√™n c·∫£ local v√† deployment
    uvicorn.run("main:app_fastapi", host="0.0.0.0", port=port, log_level="info", reload=True)