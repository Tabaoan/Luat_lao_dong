from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import os
import uvicorn
from typing import Optional
from starlette.concurrency import run_in_threadpool
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Import module chatbot
try:
    import app
    CHATBOT_AVAILABLE = hasattr(app, "chatbot")
    if CHATBOT_AVAILABLE:
        logger.info("‚úÖ Module 'app' ƒë√£ ƒë∆∞·ª£c import th√†nh c√¥ng")
    else:
        logger.warning("‚ö†Ô∏è Module 'app' kh√¥ng c√≥ object 'chatbot'")
except ImportError as e:
    app = None
    CHATBOT_AVAILABLE = False
    logger.error(f"‚ùå Kh√¥ng th·ªÉ import module 'app': {e}")

# ============================================================
# PYDANTIC MODELS
# ============================================================
class Question(BaseModel):
    """Model cho request ƒë·∫ßu v√†o"""
    question: str

class HealthResponse(BaseModel):
    """Model cho health check response"""
    status: str
    message: str
    chatbot_available: bool

class ChatResponse(BaseModel):
    """Model cho chat response"""
    answer: str

# ============================================================
# FASTAPI APP INITIALIZATION
# ============================================================
app_fastapi = FastAPI(
    title="Chatbot Lu·∫≠t Lao ƒë·ªông API",
    description="API cho h·ªá th·ªëng chatbot tra c·ª©u lu·∫≠t lao ƒë·ªông v√† d√¢n s·ª± Vi·ªát Nam",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# ============================================================
# CORS MIDDLEWARE
# ============================================================
origins = [
    "*",  # Cho ph√©p t·∫•t c·∫£ domains trong m√¥i tr∆∞·ªùng development
    # Trong production, n√™n ch·ªâ ƒë·ªãnh c·ª• th·ªÉ:
    # "https://yourdomain.com",
    # "https://www.yourdomain.com",
]

app_fastapi.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ============================================================
# HELPER FUNCTIONS
# ============================================================
async def invoke_chatbot(question: str, session_id: str = "api_session") -> str:
    """
    G·ªçi chatbot v√† x·ª≠ l√Ω response
    
    Args:
        question: C√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
        session_id: ID c·ªßa session (m·∫∑c ƒë·ªãnh l√† "api_session")
    
    Returns:
        str: C√¢u tr·∫£ l·ªùi t·ª´ chatbot
    """
    try:
        # Ki·ªÉm tra chatbot c√≥ kh·∫£ d·ª•ng kh√¥ng
        if not CHATBOT_AVAILABLE:
            raise ValueError("Chatbot kh√¥ng kh·∫£ d·ª•ng")
        
        # Chu·∫©n b·ªã input cho chatbot
        chatbot_input = {"message": question}
        config = {"configurable": {"session_id": session_id}}
        
        # Ki·ªÉm tra xem invoke c√≥ ph·∫£i l√† async function kh√¥ng
        import inspect
        if inspect.iscoroutinefunction(app.chatbot.invoke):
            # N·∫øu l√† async, g·ªçi tr·ª±c ti·∫øp v·ªõi await
            response = await app.chatbot.invoke(chatbot_input, config=config)
        else:
            # N·∫øu l√† sync, ch·∫°y trong threadpool
            response = await run_in_threadpool(
                app.chatbot.invoke,
                chatbot_input,
                config=config
            )
        
        # X·ª≠ l√Ω response
        if isinstance(response, dict):
            if 'output' in response:
                return str(response['output'])
            elif 'answer' in response:
                return str(response['answer'])
            else:
                # N·∫øu response l√† dict nh∆∞ng kh√¥ng c√≥ key mong mu·ªën
                return str(response.get('content', str(response)))
        elif isinstance(response, str):
            return response
        else:
            # Fallback cho c√°c tr∆∞·ªùng h·ª£p kh√°c
            return str(response)
            
    except Exception as e:
        logger.error(f"L·ªói khi g·ªçi chatbot: {e}", exc_info=True)
        raise

# ============================================================
# API ROUTES
# ============================================================

@app_fastapi.get("/", response_model=HealthResponse)
async def root():
    """
    Health check endpoint
    
    Returns:
        HealthResponse: Tr·∫°ng th√°i c·ªßa API
    """
    return HealthResponse(
        status="online",
        message="‚úÖ Chatbot Lu·∫≠t Lao ƒë·ªông API ƒëang ho·∫°t ƒë·ªông",
        chatbot_available=CHATBOT_AVAILABLE
    )

@app_fastapi.get("/health")
async def health_check():
    """
    Endpoint ki·ªÉm tra s·ª©c kh·ªèe c·ªßa service (cho deployment platforms)
    
    Returns:
        dict: Tr·∫°ng th√°i chi ti·∫øt c·ªßa service
    """
    return {
        "status": "healthy",
        "service": "Chatbot Lu·∫≠t Lao ƒë·ªông API",
        "chatbot_available": CHATBOT_AVAILABLE,
        "version": "1.0.0"
    }

@app_fastapi.post("/chat", response_model=ChatResponse)
async def chat(data: Question):
    """
    Endpoint ch√≠nh ƒë·ªÉ chat v·ªõi bot
    
    Args:
        data: Question object ch·ª©a c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
    
    Returns:
        ChatResponse: C√¢u tr·∫£ l·ªùi t·ª´ chatbot
    
    Raises:
        HTTPException: 400 n·∫øu c√¢u h·ªèi r·ªóng, 500 n·∫øu c√≥ l·ªói server, 503 n·∫øu chatbot kh√¥ng kh·∫£ d·ª•ng
    """
    # Validate input
    question = data.question.strip()
    
    if not question:
        raise HTTPException(
            status_code=400,
            detail="C√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
        )
    
    # Ki·ªÉm tra chatbot c√≥ s·∫µn s√†ng kh√¥ng
    if not CHATBOT_AVAILABLE:
        logger.error("Chatbot kh√¥ng kh·∫£ d·ª•ng")
        raise HTTPException(
            status_code=503,
            detail="Chatbot hi·ªán kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh server."
        )
    
    try:
        # G·ªçi chatbot
        logger.info(f"Nh·∫≠n c√¢u h·ªèi: {question[:100]}...")
        answer = await invoke_chatbot(question)
        logger.info(f"Tr·∫£ l·ªùi th√†nh c√¥ng: {answer[:100]}...")
        
        return ChatResponse(answer=answer)
        
    except ValueError as ve:
        # L·ªói t·ª´ logic nghi·ªáp v·ª•
        logger.error(f"L·ªói nghi·ªáp v·ª•: {ve}")
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói x·ª≠ l√Ω: {str(ve)}"
        )
    except Exception as e:
        # L·ªói kh√¥ng x√°c ƒë·ªãnh
        logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}", exc_info=True)
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói server: Kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u h·ªèi. Chi ti·∫øt: {str(e)}"
        )

# ============================================================
# STARTUP EVENT
# ============================================================
@app_fastapi.on_event("startup")
async def startup_event():
    """
    Event ƒë∆∞·ª£c g·ªçi khi server kh·ªüi ƒë·ªông
    """
    logger.info("=" * 60)
    logger.info("üöÄ KH·ªûI ƒê·ªòNG CHATBOT API")
    logger.info("=" * 60)
    logger.info(f"üìã Chatbot available: {CHATBOT_AVAILABLE}")
    
    if CHATBOT_AVAILABLE:
        logger.info("‚úÖ Server s·∫µn s√†ng nh·∫≠n request")
    else:
        logger.warning("‚ö†Ô∏è Server ƒëang ch·∫°y nh∆∞ng chatbot KH√îNG kh·∫£ d·ª•ng")
    
    logger.info("=" * 60)

# ============================================================
# MAIN ENTRY POINT (CH·ªà CHO LOCAL DEVELOPMENT)
# ============================================================
if __name__ == "__main__":
    # L·∫•y port t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c d√πng 8000 l√†m m·∫∑c ƒë·ªãnh
    port = int(os.environ.get("PORT", 8000))
    
    logger.info(f"üîß Ch·∫°y ·ªü ch·∫ø ƒë·ªô development tr√™n port {port}")
    
    # Ch·∫°y server v·ªõi uvicorn
    uvicorn.run(
        "main:app_fastapi",
        host="0.0.0.0",
        port=port,
        reload=True,  # Auto-reload khi code thay ƒë·ªïi (ch·ªâ d√πng trong dev)
        log_level="info"
    )