from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import os
import uvicorn
from starlette.concurrency import run_in_threadpool
import sys
import logging
from contextlib import asynccontextmanager

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Bi·∫øn global ƒë·ªÉ l∆∞u chatbot
chatbot_instance = None
app_module = None

# ---------------------------------------
# Lifespan Context Manager
# ---------------------------------------
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Qu·∫£n l√Ω lifecycle c·ªßa ·ª©ng d·ª•ng (startup/shutdown)"""
    global chatbot_instance, app_module
    
    # STARTUP
    logger.info("üöÄ FastAPI Server Starting...")
    logger.info(f"Python version: {sys.version}")
    logger.info(f"PORT: {os.environ.get('PORT', '10000')}")
    
    # Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng quan tr·ªçng
    required_env_vars = ["OPENAI__API_KEY", "PINECONE_API_KEY", "PINECONE_INDEX_NAME"]
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng: {', '.join(missing_vars)}")
        logger.error("‚ö†Ô∏è Chatbot s·∫Ω kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng c√°ch!")
    else:
        logger.info("‚úÖ T·∫•t c·∫£ bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt ƒë√£ c√≥")
    
    # Import v√† kh·ªüi t·∫°o chatbot
    try:
        logger.info("üì• ƒêang import module app...")
        import app as app_module
        logger.info("‚úÖ Import app module th√†nh c√¥ng")
        
        # Ki·ªÉm tra v√† load VectorDB
        if hasattr(app_module, 'load_vectordb'):
            logger.info("üîÑ ƒêang load Pinecone VectorDB...")
            result = app_module.load_vectordb()
            
            if result is not None:
                logger.info("‚úÖ VectorDB ƒë√£ ƒë∆∞·ª£c load th√†nh c√¥ng")
                
                # L·∫•y th·ªëng k√™
                if hasattr(app_module, 'get_vectordb_stats'):
                    stats = app_module.get_vectordb_stats()
                    logger.info(f"üìä Pinecone Index: {stats.get('name', 'N/A')}")
                    logger.info(f"üìö Total documents: {stats.get('total_documents', 0)}")
                    logger.info(f"üìè Dimension: {stats.get('dimension', 'N/A')}")
            else:
                logger.error("‚ùå Kh√¥ng th·ªÉ load VectorDB t·ª´ Pinecone")
                logger.error("üí° Ki·ªÉm tra: PINECONE_API_KEY, PINECONE_INDEX_NAME, v√† Index c√≥ d·ªØ li·ªáu ch∆∞a")
        
        # L·∫•y chatbot instance
        if hasattr(app_module, 'chatbot'):
            chatbot_instance = app_module.chatbot
            logger.info("‚úÖ Chatbot instance ƒë√£ s·∫µn s√†ng")
        else:
            logger.error("‚ùå Kh√¥ng t√¨m th·∫•y 'chatbot' trong module app")
            
    except ImportError as e:
        logger.error(f"‚ùå Kh√¥ng th·ªÉ import module app: {e}")
        logger.error("‚ö†Ô∏è API s·∫Ω ch·∫°y ·ªü ch·∫ø ƒë·ªô mock (kh√¥ng c√≥ chatbot th·ª±c)")
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi kh·ªüi t·∫°o chatbot: {e}", exc_info=True)
    
    logger.info("="*60)
    logger.info("‚úÖ Server ƒë√£ s·∫µn s√†ng nh·∫≠n requests")
    logger.info("="*60)
    
    yield  # Server ƒëang ch·∫°y
    
    # SHUTDOWN
    logger.info("üõë Server ƒëang shutdown...")

# ---------------------------------------
# Kh·ªüi t·∫°o FastAPI App
# ---------------------------------------
app_fastapi = FastAPI(
    title="Chatbot Lu·∫≠t Lao ƒë·ªông API",
    description="API cho m√¥ h√¨nh chatbot tra c·ª©u Lu·∫≠t Lao ƒë·ªông & Khu c√¥ng nghi·ªáp Vi·ªát Nam",
    version="1.0.0",
    lifespan=lifespan
)

# ---------------------------------------
# C·∫•u h√¨nh CORS
# ---------------------------------------
origins = [
    "*",  # Cho ph√©p t·∫•t c·∫£ domain (production n√™n gi·ªõi h·∫°n c·ª• th·ªÉ)
]

app_fastapi.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ---------------------------------------
# Pydantic Models
# ---------------------------------------
class Question(BaseModel):
    """ƒê·ªãnh nghƒ©a c·∫•u tr√∫c d·ªØ li·ªáu JSON ƒë·∫ßu v√†o."""
    question: str

    class Config:
        json_schema_extra = {
            "example": {
                "question": "Lu·∫≠t lao ƒë·ªông quy ƒë·ªãnh th·ªùi gian l√†m vi·ªác nh∆∞ th·∫ø n√†o?"
            }
        }

# ---------------------------------------
# API Routes
# ---------------------------------------
@app_fastapi.get("/", summary="Root endpoint - API Info")
async def home():
    """Endpoint ch√≠nh cung c·∫•p th√¥ng tin v·ªÅ API"""
    return {
        "status": "healthy",
        "service": "Chatbot Lu·∫≠t Lao ƒë·ªông API",
        "version": "1.0.0",
        "message": "‚úÖ API ƒëang ho·∫°t ƒë·ªông",
        "endpoints": {
            "chat": "POST /chat - G·ª≠i c√¢u h·ªèi cho chatbot",
            "health": "GET /health - Health check",
            "status": "GET /status - Ki·ªÉm tra tr·∫°ng th√°i chatbot"
        },
        "chatbot_ready": chatbot_instance is not None
    }

@app_fastapi.get("/health", summary="Health check endpoint")
async def health_check():
    """
    Health check endpoint cho Render v√† c√°c monitoring services.
    Tr·∫£ v·ªÅ 200 OK n·∫øu server ƒëang ch·∫°y.
    """
    return {
        "status": "ok",
        "service": "chatbot-api",
        "healthy": True
    }

@app_fastapi.get("/status", summary="Ki·ªÉm tra tr·∫°ng th√°i chi ti·∫øt")
async def status_check():
    """
    Ki·ªÉm tra tr·∫°ng th√°i chi ti·∫øt c·ªßa chatbot v√† VectorDB.
    """
    status_info = {
        "chatbot_loaded": chatbot_instance is not None,
        "app_module_loaded": app_module is not None,
        "environment": {
            "openai_key_set": bool(os.getenv("OPENAI__API_KEY")),
            "pinecone_key_set": bool(os.getenv("PINECONE_API_KEY")),
            "pinecone_index": os.getenv("PINECONE_INDEX_NAME", "Not set")
        }
    }
    
    # L·∫•y th√¥ng tin VectorDB n·∫øu c√≥
    if app_module and hasattr(app_module, 'get_vectordb_stats'):
        try:
            vectordb_stats = app_module.get_vectordb_stats()
            status_info["vectordb"] = vectordb_stats
        except Exception as e:
            status_info["vectordb"] = {"error": str(e)}
    
    return status_info

@app_fastapi.post("/chat", summary="Chat v·ªõi Chatbot")
async def chat(data: Question):
    """
    Endpoint ch√≠nh ƒë·ªÉ chat v·ªõi chatbot.
    
    Args:
        data: JSON object ch·ª©a c√¢u h·ªèi
        
    Returns:
        JSON object ch·ª©a c√¢u tr·∫£ l·ªùi t·ª´ chatbot
        
    Raises:
        HTTPException: 400 n·∫øu c√¢u h·ªèi r·ªóng, 500 n·∫øu c√≥ l·ªói x·ª≠ l√Ω
    """
    question = data.question.strip()
    
    # Validate input
    if not question:
        raise HTTPException(
            status_code=400,
            detail="C√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng. Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n."
        )
    
    # Ki·ªÉm tra chatbot c√≥ s·∫µn s√†ng kh√¥ng
    if chatbot_instance is None:
        logger.error("Chatbot ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
        raise HTTPException(
            status_code=503,
            detail="Chatbot ch∆∞a s·∫µn s√†ng. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ki·ªÉm tra logs server."
        )
    
    try:
        logger.info(f"üì© Nh·∫≠n c√¢u h·ªèi: {question[:100]}...")
        
        # Session ID cho API (c√≥ th·ªÉ customize theo user n·∫øu c·∫ßn)
        session_id = "api_session"
        
        # G·ªçi chatbot (ch·∫°y trong thread pool v√¨ chatbot.invoke l√† sync)
        response = await run_in_threadpool(
            chatbot_instance.invoke,
            {"message": question},
            config={"configurable": {"session_id": session_id}}
        )
        
        # X·ª≠ l√Ω response
        answer = None
        if isinstance(response, dict):
            # N·∫øu response l√† dict, t√¨m key 'output' ho·∫∑c 'answer'
            answer = response.get('output') or response.get('answer') or str(response)
        elif isinstance(response, str):
            answer = response
        else:
            answer = str(response)
        
        logger.info(f"‚úÖ Tr·∫£ l·ªùi th√†nh c√¥ng: {answer[:100]}...")
        
        return {
            "success": True,
            "answer": answer,
            "question": question
        }
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi x·ª≠ l√Ω chatbot: {e}", exc_info=True)
        
        # Log chi ti·∫øt ƒë·ªÉ debug
        error_detail = str(e)
        
        # Ki·ªÉm tra c√°c l·ªói ph·ªï bi·∫øn
        if "API key" in error_detail or "authentication" in error_detail.lower():
            error_msg = "L·ªói x√°c th·ª±c API. Vui l√≤ng ki·ªÉm tra OPENAI_API_KEY."
        elif "pinecone" in error_detail.lower():
            error_msg = "L·ªói k·∫øt n·ªëi Pinecone. Vui l√≤ng ki·ªÉm tra PINECONE_API_KEY v√† Index."
        elif "rate limit" in error_detail.lower():
            error_msg = "V∆∞·ª£t qu√° gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau."
        else:
            error_msg = f"L·ªói x·ª≠ l√Ω c√¢u h·ªèi: {error_detail}"
        
        raise HTTPException(
            status_code=500,
            detail=error_msg
        )

# ---------------------------------------
# Run server (ch·ªâ cho local development)
# ---------------------------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"üåê Starting server on port {port}...")
    
    uvicorn.run(
        "main:app_fastapi",
        host="0.0.0.0",
        port=port,
        log_level="info",
        access_log=True
    )