from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import os
import uvicorn
from typing import Optional, Any
from starlette.concurrency import run_in_threadpool
import sys
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Import chatbot module
try:
    import app
    logger.info("‚úÖ Successfully imported 'app' module")
except ImportError as e:
    app = None
    logger.warning(f"‚ö†Ô∏è Could not import 'app' module: {e}")

# --- Khai b√°o Model cho d·ªØ li·ªáu ƒë·∫ßu v√†o ---
class Question(BaseModel):
    """ƒê·ªãnh nghƒ©a c·∫•u tr√∫c d·ªØ li·ªáu JSON ƒë·∫ßu v√†o."""
    question: str

# ---------------------------------------
# 1Ô∏è‚É£ Kh·ªüi t·∫°o FastAPI App + b·∫≠t CORS
# ---------------------------------------
app_fastapi = FastAPI(
    title="Chatbot Lu·∫≠t Lao ƒë·ªông API",
    description="API cho m√¥ h√¨nh chatbot",
    version="1.0.0"
)

# üîπ C·∫•u h√¨nh CORS Middleware
origins = [
    "*",  # Cho ph√©p t·∫•t c·∫£ domain g·ªçi API n√†y
]

app_fastapi.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ---------------------------------------
# 2Ô∏è‚É£ Health Check Route (Quan tr·ªçng cho Render)
# ---------------------------------------
@app_fastapi.get("/", summary="Ki·ªÉm tra tr·∫°ng th√°i API")
async def home():
    """Route ki·ªÉm tra xem API c√≥ ho·∫°t ƒë·ªông kh√¥ng."""
    return {
        "status": "healthy",
        "message": "‚úÖ Chatbot Lu·∫≠t Lao ƒë·ªông API ƒëang ho·∫°t ƒë·ªông.",
        "usage": "G·ª≠i POST t·ªõi /chat v·ªõi JSON { 'question': 'C√¢u h·ªèi c·ªßa b·∫°n' }",
        "chatbot_loaded": hasattr(app, "chatbot") if app else False
    }

@app_fastapi.get("/health", summary="Health check endpoint")
async def health_check():
    """Health check endpoint cho Render."""
    return {"status": "ok"}

# ---------------------------------------
# 3Ô∏è‚É£ Route ch√≠nh: /chat (POST)
# ---------------------------------------
@app_fastapi.post("/chat", summary="D·ª± ƒëo√°n/Tr·∫£ l·ªùi c√¢u h·ªèi t·ª´ Chatbot")
async def predict(data: Question):
    """
    Nh·∫≠n c√¢u h·ªèi v√† tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi t·ª´ m√¥ h√¨nh chatbot.
    """
    question = data.question.strip()

    if not question:
        raise HTTPException(
            status_code=400, 
            detail="Thi·∫øu tr∆∞·ªùng 'question' trong JSON ho·∫∑c c√¢u h·ªèi b·ªã r·ªóng."
        )

    try:
        answer = None
        
        # ‚úÖ G·ªçi chatbot th·ª±c t·∫ø n·∫øu c√≥
        if app and hasattr(app, "chatbot"):
            session = "api_session"
            
            # Ki·ªÉm tra xem c√≥ ph·∫£i async function kh√¥ng
            import inspect
            if inspect.iscoroutinefunction(app.chatbot.invoke):
                # N·∫øu l√† async, d√πng await
                response = await app.chatbot.invoke(
                    {"message": question},
                    config={"configurable": {"session_id": session}}
                )
            else:
                # N·∫øu l√† sync, ch·∫°y trong thread pool
                response = await run_in_threadpool(
                    app.chatbot.invoke,
                    {"message": question},
                    config={"configurable": {"session_id": session}}
                )
            
            # X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ
            if isinstance(response, dict) and 'output' in response:
                answer = response['output']
            elif isinstance(response, str):
                answer = response
            else:
                answer = str(response)
        else:
            # N·∫øu ch∆∞a c√≥ chatbot th·∫≠t
            logger.warning("Chatbot not loaded, using mock response")
            answer = f"‚ö†Ô∏è Chatbot ch∆∞a ƒë∆∞·ª£c load. B·∫°n h·ªèi: '{question}'"

        return {"answer": answer}

    except Exception as e:
        logger.error(f"‚ùå L·ªói x·ª≠ l√Ω chatbot: {e}", exc_info=True)
        raise HTTPException(
            status_code=500, 
            detail=f"L·ªói x·ª≠ l√Ω Chatbot: {str(e)}"
        )

# ---------------------------------------
# 4Ô∏è‚É£ Startup Event (Log th√¥ng tin)
# ---------------------------------------
@app_fastapi.on_event("startup")
async def startup_event():
    """Log th√¥ng tin khi kh·ªüi ƒë·ªông."""
    logger.info("üöÄ FastAPI Server Starting...")
    logger.info(f"Python version: {sys.version}")
    logger.info(f"Chatbot module loaded: {app is not None}")
    if app and hasattr(app, "chatbot"):
        logger.info("‚úÖ Chatbot object found")
    else:
        logger.warning("‚ö†Ô∏è Chatbot object not found")

# ---------------------------------------
# 5Ô∏è‚É£ Kh·ªüi ƒë·ªông server (ch·ªâ cho local development)
# ---------------------------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"Starting server on port {port}")
    uvicorn.run(
        "main:app_fastapi", 
        host="0.0.0.0", 
        port=port, 
        log_level="info"
    )